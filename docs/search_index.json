[
["index.html", "실무 빅데이터 분석을 위한 SQL과 R의 활용 CAMP 머리말", " 실무 빅데이터 분석을 위한 SQL과 R의 활용 CAMP ChanYub Park 2017-04-06 머리말 이 책은 패스트캠퍼스의 데이터 사이언스 캠프 코스의 실무 빅데이터 분석을 위한 SQL과 R의 활용 CAMP의 수업용으로 제작되었습니다. 수업에 대해 더 자세히 알고 싶으신 분은 강사 인터뷰를 참고하세요. 책은 각각 R의 IDE로 사실상 표준인 RStudio에 사용하기 좋은 기능 소개, 대부분의 에러 문제를 해결할 수 있는 기초 자료형에 대한 이해, 단순 반복 업무를 위한 for문과 apply류 맛보기, 데이터 원본/의존성의 개념과 SQL 문법 익히기, tidy data 개념과 dplyr+tidyr로 데이터 다루기, 보고용 차트를 위한 ggplot2 사용하기, 정기 보고서 자동 작성을 위해 knitr로 문서화하고 스케줄러로 자동화하기, shiny 패키지를 활용한 인터렉티프 웹 만들기로 구성되어 있습니다. 많은 부분 rstudio-IDE-cheatsheet, R for Data Science, R Programming for Data Science, ggplot2-book, shiny-tutorial, Microsoft’s DAT204x, datacamp, programiz을 참고하였습니다. 데이터 분석은 많은 단계들과 업무들로 나누어져 있습니다. 개인적으로 1. 데이터 확보 2. 데이터 정제 3. 분석 4. 시각화의 단계를 거친다고 생각합니다. 데이터란 사내에서 관리하고 있는 내부 데이터와 외부 인터넷에 공개되어 있는 데이터로 구분할 수 있습니다. 이런 데이터들 중 분석과 업무 목적에 맞는 데이터를 찾고, 활용하기 위에 확보하는 과정이 1단계 입니다. 분석 방법과 내용에 따라 확보된 데이터를 정리하거나 고쳐야 하는 일도 있습니다. 2 단계는 그것을 뜻합니다. 3 단계인 분석은 다양한 통계적 방법들을 통해 분석 목적을 이루는 것입니다. 4단계는 이렇게 이루어낸 결과물을 다른 사람에게 전달하기 위해 필요합니다. 이 책은 그 중 2단계인 정제와 4단계인 시각화에 초점이 맞춰져 있습니다. 계속 업데이트되므로 정보 챕터 하단에 업데이트 날짜를 확인하세요. 저작물 라이선스로 크리에이티브 커먼즈 라이선스 4.0(저작자 표시-비영리-변경 금지(BY-NC-ND))를 따릅니다. "],
["before-start.html", "1 시작하기 전에 1.1 데이터를 다루는 것 1.2 준비된 데이터 1.3 R과 Rstudio 1.4 git과 github 1.5 사용할 데이터베이스 1.6 환경 통일을 위한 도구 도커 1.7 정보", " 1 시작하기 전에 수업에서 사용하는 자료와 기반하는 생각들을 작성하고자 합니다. 1.1 데이터를 다루는 것 데이터 과학을 진행하는데에는 아래의 과정을 따릅니다. 공부를 위해 작성하는 자료니 만큼 자료를 생산하는 모든 코드는 숨기지 않고 같이 출력하겠습니다. library(&quot;visNetwork&quot;) nodes &lt;- data.frame(id = 1:7,label=c(&quot;1. 데이터 확보&quot;,&quot;2. 데이터 정제&quot;, &quot;3. 분석&quot;,&quot;데이터 핸들링&quot;,&quot;분석&quot;,&quot;결과 검증&quot;,&quot;4. 시각화&quot;), shape=&quot;box&quot;, font.size=25) edges &lt;- data.frame(from = c(1,2,3,4,5,3,6), to = c(2,3,7,5,6,4,4), dashes = c(F,F,F,F,F,T,F), length=100) visNetwork(nodes, edges, width = &quot;100%&quot;) %&gt;% visEdges(arrows =list(to = list(enabled = TRUE, scaleFactor = 1))) %&gt;% visLayout(randomSeed = -0.9261698*10000) 위 표는 해들리 위컴의 R for Data Science에 소개에 작성된 표이기도 합니다. 각각 Import, Tidy, Transform, Visualise, Model, Communicate라고 되어 있는 것을 제 상황에 맞게 각색하였습니다. 데이터 확보는 분석 목적에 맞는 데이터를 확보하는 것입니다. 보통 기업인의 입장에서 기업 내부에서 생산, 관리되고 있는 데이터, 외부에서 찾아야 하는 데이터, 없기 때문에 실험등을 통해 생산해야 하는 데이터 정도로 데이터를 나눌 수 있습니다. 이 때 내부 데이터를 사용하기 위해서는 두 가지 진입장벽이 있는데, 정책적인 접근 권한과 데이터를 다룰 줄 아는 능력입니다. 이 후 과정에서 데이터를 다루고, 그것으로 통계적 분석을 거쳐 필요한 결과물을 만드는 것에서 가장 보편적인 도구는 엑셀입니다. 데부분은 엑셀을 잘 사용하는 것으로 해결할 수 있습니다. 하지만 데이터가 커지고, 통계적 분석에 대한 수요가 높아지면서 R에 대한 관심으로 이어지고 있는 상황입니다. 데이터 정제는 해들리 위컴이 이야기한 Tidy data를 만드는 과정에 해당합니다. 이것을 위해서 Tidy data에 대해서 이야기 해야 하는데 그건 6장에서 다루려고 합니다. 간단하게는 컴퓨터에게 일을 시키기 좋은 상태로 데이터를 정리하는 것을 뜻합니다. 시간이 많이 드는 과정입니다. 분석은 데이터 핸들링, 분석, 결과 검증의 사이클을 따라 반복합니다. EDA나 데이터 이해를 위한 시각화 등이 이루어지고, 분석을 진행하며 얻는 결과물들을 만드는 과정이 진행됩니다. 이 때 개발에서 재현성의 개념을 가져오면 일을 좀 수월하게 할 수 있습니다. 여기서 말하는 재현성이란 연구 재현성보다는 실행 재현성을 뜻합니다. 실행 재현성은 어떤 결과물을 만드는 작업을 실행했을 때 다시 그것을 그대로 실행할 수 있는 것을 뜻합니다. 코드로 분석을 진행하는 것은 실행 재현성과 자동화에 매우 도움이 됩니다. 시각화는 앞서 반복적인 연구를 통해 알게된 사실을 다른 사람들에게 전달하는 과정 전체를 뜻합니다. 본 자료에서는 그래서 차트그리기 뿐만 아니라 Rmd를 활용한 문서화와 shiny를 활용한 앱 또한 시각화의 일부로써 다루고 있습니다. 위 4개 과정을 모두 다룰 줄 알면, 이제 도구를 다룰줄 알게 되는 것입니다. 연구나 분석 능력은 또 별개이지 않나 싶습니다. 이 책을 지속적으로 업데이트해서 연구와 분석, 데이터 과학에 대해 모두 다루는 책이 되기를 희망합니다. 1.2 준비된 데이터 수업을 위해 준비한 데이터는 고위 공직자 재산, 세종기업데이터를 크롤링한 깃헙 저장소, outbrain이 캐글에 공개한 사용자 웹 클릭 데이터 입니다. 웹 클릭 데이터는 특별히 sql로 데이터 핸들링을 하는 것에 대한 경험을 확보하기 위해서 찾아보았으며 전체 데이터는 약 100GB에 달하는 방대한 양입니다. 수업에서 실제로 다루기 보다는 다루어 보실 수 있게 데이터를 준비했습니다. 1.3 R과 Rstudio R은 여기에서 다운로드 할 수 있습니다. RStudio은 R을 사용하기 위한 IDE로 여러 편의성을 제공합니다. 자세한 사용법은 2장에서 소개합니다. 1.4 git과 github git은 코드의 버전관리 도구로 github의 인기에 힘입어 많은 개발자들이 사용하고 있습니다. 코드를 공개해 사용하면 무료이며, 이 책을 호스팅 하는 것처럼 각 아이디의 서브도메인을 무료로 사용할 수 있게 제공해줍니다. 수업에서는 자료 공유의 목적과 다른 사용자의 코드를 사용하는 수준으로 사용을 권장할 예정이며 깊게 공부하고 싶다면 한글자료가 많이 준비되어 있으니 참고하시기 바랍니다. 1.5 사용할 데이터베이스 오픈소스인 mariaDB을 사용하려고 합니다. 사용한 이유는 이 기사가 잘 설명하는 것 같습니다. 기본적으로는 전통적인 RDBMS이면서 많은 사람들이 사용하는 제품이기 때문입니다. 수업에 사용하는 모든 서비스, 패키지 등 일체는 모두 1. 오픈 소스이고 2. 많은 사용자를 확보해서 활발히 발달하고 있으며 3. 참고할 자료가 많은 것을 선택하려고 노력했습니다. 데이터베이스의 설치는 windows, mac을 참고해 주세요. mariaDB와 함께 인터페이스로 설치되는 HeidiSQL은 데이터베이스를 관리하는데 사용하는 GUI 툴입니다. 맥에서는 WINE을 통해서 사용할 수 있다고 하는데, Sequel Pro라는 도구도 있고, 설치를 소개하는 블로그가 있으니 참고하시기 바랍니다. 1.6 환경 통일을 위한 도구 도커 수업에서 다루지는 않지만 설치나 다른 환경 세팅으로 인한 시간 소모를 줄이기 위해서 docker를 사용할 수 있습니다. 수업 데이터가 준비되어 있는 마리아디비 도커 이미지를 준비하고 있습니다. 윈도우에서 하이퍼바이저(pro 버전 등에서 사용가능)가 있지 않은 경우 버추얼박스를 통해서 동작하므로 성능이 떨어질 수 있습니다. 1.7 정보 이 책의 소스는 여기에서 확인하실 수 있으며 아래 주어진 R 패키지(및 종속 패키지)의 버전으로 제작되었습니다. 저작물의 재현을 위해서 필요합니다. package * version date source backports 1.0.5 2017-01-18 CRAN (R 3.3.3) bookdown 0.3 2016-11-28 CRAN (R 3.3.3) codetools 0.2-15 2016-10-05 CRAN (R 3.3.3) devtools 1.12.0 2016-12-05 CRAN (R 3.3.3) digest 0.6.12 2017-01-27 CRAN (R 3.3.3) evaluate 0.10 2016-10-11 CRAN (R 3.3.3) htmltools 0.3.5 2016-03-21 CRAN (R 3.3.3) htmlwidgets 0.8 2016-11-09 CRAN (R 3.3.3) jsonlite 1.3 2017-02-28 CRAN (R 3.3.3) knitr 1.15.1 2016-11-22 CRAN (R 3.3.3) magrittr 1.5 2014-11-22 CRAN (R 3.3.3) memoise 1.0.0 2016-01-29 CRAN (R 3.3.3) Rcpp 0.12.10 2017-03-19 CRAN (R 3.3.3) rmarkdown 1.3 2016-12-21 CRAN (R 3.3.3) rprojroot 1.2 2017-01-16 CRAN (R 3.3.3) stringi 1.1.2 2016-10-01 CRAN (R 3.3.3) stringr 1.2.0 2017-02-18 CRAN (R 3.3.3) visNetwork * 1.0.3 2016-12-22 CRAN (R 3.3.3) withr 1.0.2 2016-06-20 CRAN (R 3.3.3) yaml 2.1.14 2016-11-12 CRAN (R 3.3.3) 이 책은 박찬엽이 Tuesday, April 04, 2017 07:38:41 PM UTC에 마지막으로 업데이트 했습니다. "],
["rstudio.html", "2 RStudio에 사용하기 좋은 기능 소개 2.1 RStudio 소개 2.2 구조와 기능들 2.3 프로젝트와 버전관리 2.4 도움말", " 2 RStudio에 사용하기 좋은 기능 소개 첫 수업은 RStudio를, 정확하게는 IDE에서 받을 수 있는 기능적 혜택들을 소개하려고 합니다. 2.1 RStudio 소개 2.1.1 IDE 란 IDE란 _통합 개발 환경_의 영어 줄임말로 텍스트 편집이외에도 디버깅, 컴파일, 배포등 개발의 위한 기능을 통합적으로 제공하는 프로그램을 지칭합니다. R 또한 개발언어의 일종으로 여러 IDE에서 사용할 수 있게 지원하고 있습니다. 2.1.2 Rstudio RStudio는 R을 처음 배우는 사람이 꼭 사용하는 IDE입니다. 다른 IDE에 비해 R 언어에 특화된 UI와 기능을 가지고 있으며 ggplot2, shiny, dplyr, httr 등 다양항 패키지를 왕성하게 만들고 있는 RStudio 팀이 직접 관리를 하기 때문에 문서도 많고, 우리나라 사용자층도 큰 편입니다. 특히 초보자부터 고급 사용자까지 필요한 많은 기능들을 GUI로 제공해 줘서 배울 수록 편리함이 늘어납니다. 2.1.3 다른 IDE 소개 IDE는 메모장 처럼 가벼운 Sublime Text부터 본격적인 Visual Studio까지 다양합니다. 개발자들이 많이 사용하는 IDE를 몇개 소개하겠습니다. Sublime Text는 꽤 오랫동안 사랑받은 텍스트 에디터 형 IDE입니다. 몇 가지 설정을 진행하면 R 코드도 실행하게 만들 수 있어 기존 개발자 분들 중 R을 공부하실 때 사용하는 경우가 종종 있습니다. Atom은 웹기술을 활용해서 어느 컴퓨터에서든 사용할 수 있는 범용성을 가진 IDE입니다. 가장 큰 강점은 plugin 제작이 쉬워서 사용자층이 폭발적으로 늘어나서 최근 많은 개발자들이 사용하고 있습니다. 대부분 웹 개발에 사용되며 오픈소스여서 비용이 발생하지 않는 장점이 있습니다. Vs Code는 Atom의 소스를 사용해서 마이크로소프트에서 수정한 IDE입니다. 여전히 오픈소스이며 큰 기업이 지원하는 만큼 기능 정리를 통한 최적화가 강점입니다. github 연동, 자동 업데이트 등 사용자 편의에 조금 더 중점을 두었습니다. Nuclide도 역시 Atom의 소스를 사용해서 페이스북이 만든 IDE입니다. 역시 오픈소스이며 remote Development를 기본 제공하는 것이 특징입니다. 페이스북 내에서 사용하기 위해 만들어졌다보니 웹개발에 조금더 최적화되어 있습니다. 마이크로 소프트가 레볼루션 R을 인수하면서 R 생태계 흡수를 위해 여러 기능들을 지원하는데요. RTVS이 대표적입니다. Visual Studio는 꽤 오랫동안 개발자들이 사용한 IDE입니다. IDE라는 말이 어울리게 수GB의 용량을 차지하고 매우 많은 기능들을 제공합니다. RTVS는 이런 Visual Studio에서 R을 사용할 수 있게 만든 기능으로 무료로 공개한 Visual Studio 2015 커뮤니티 버전에 설치하여 R의 사용환경을 구성할 수 있습니다. 2.2 구조와 기능들 RStudio는 처음부터 R을 지원하기 때문에 설치 이외의 작업을 할 필요 없고, 사용자층이 많아 사용법을 배우기도 좋고 검색도 쉽게 됩니다. 그래서 IDE를 RStudio로 선정하고 기능에 대해 설명하겠습니다. 여기 설명하는 기능은 RStudio만의 기능이 아니며 다른 IDE도 구성에 따라 같은 기능 혹은 더 나은 기능을 사용할 수 있습니다. 처음 실행하면 전부 4개면(pane)으로 구성되어 있으며 각부의 이름 은 위 그림과 같습니다. source 창은 코드와 그 순서를 저장하는 script를 보여주는 곳입니다. console 창은 R의 엔진과 대화(!)를 할 수 있는 공간합니다. 명령어를 입력하면, 바로 콘솔창이 대답을 줍니다. console 창에 직접 입력을 해도 되고, source 창의 코드를 여러 방법을 통해서 console 창으로 전달해서 결과를 받을 수 도 있습니다. environment 창(이하 env 창)은 console 창에 입력이 되어서 현재 메모리에 기록되어 있는 상황을 보여주는 곳입니다. R은 변수가 메모리에 저장되어 있는 상태여야만 변수로써 사용할 수 있습니다. 그래서 env 창에서는 그렇게 메모리에 저장되어 있는 변수들의 이름과 내용을 확인할 수 있습니다. help 창은 window 탐색기와 같은 files, 차트 결과를 보여주는 plots, 설치나 불러온 패키지 상태를 보는 packages, 도움말을 보는 help 등 다양한 창으로 구성되어 있습니다. 아래에서 하나하나 중요한 기능을 보겠습니다. 2.2.1 source 창 source창 source 창에서 가장 중요한 기능은 ctrl+enter 입니다. ctrl+enter는 커서가 위치한 줄의 코드를 console 창으로 전달해서 R 엔진이 결과물을 주도록 하는 단축키입니다. 코드를 드래그해서 선택한 만큼의 코드를 실행할 때도 같은 단축키를 사용합니다. File &gt; New File 로 들어가시면 여러 종류의 파일을 만들 수 있는데, 각 파일에 따라 다른 추가 기능들이 나오기도 합니다. 2.2.2 console 창 console 창은 실제로 실행이 이루어지는 곳입니다. 여기서 가장 중요한 것은 아래 보이는 workding directory위치 입니다. R도 다른 개발 언어들 처럼 R 엔진이 실행되는 폴더의 위치가 지정되어 있습니다. R 엔진이 실행되는 위치를 workding directory라고 합니다. 그래서 파일을 불러오거나 하는 명령어는 workding directory를 기준으로 실행이 됩니다. 폴더의 위치를 입력하는 양식을 보통 경로라는 단어를 사용하고, 편의에 따라 절대경로와 상대경로를 사용합니다. workding directory가 문제가 되는 경우는 상대경로일 때 입니다. 상대경로는 . 이라는 표시를 현재 폴더라는 뜻으로 사용합니다. workding directory를 잘 모르고 실행하다 문제가 생기면 가장 해결하기 좋은 방법은 절대경로를 사용하는 것입니다. 혼자 사용하면 문제가 없지만 같이 사용하거나 다른 환경에서 사용해야 할 경우는 매번 경로를 수정해야 되는 문제가 생깁니다. 그렇다면 상대경로로 작성하되 동작방식을 하는게 중요합니다. 보통은 파일을 실행하는 위치로 결정되는데, console의 경우 처음 언어 엔진을 실행한 위치로 결정되기도 합니다. 처음 시작하시는 분들이 크게 하는 실수는 help 창 부분에서 사용하는 files에서 보는 위치로 workding directory가 계속 따라 바뀌는 것으로 오해하는 것입니다. files 창 내에서 실행하는 것 이외의 실행들은 대부분 위 사진의 위치에 있는 workding directory에서 실행된다고 알고 계시는 것이 중요합니다. 2.2.3 environment 창 env창 environment 창은 Environment 창과 History 창, git을 사용한다면 git 창이 보입니다. Build 창이 보일때가 있는데 이것은 package를 만들거나 소스를 가져와 컴파일할 때 사용하는 창으로 사용할 일이 있으시면 R packages을 참고하세요. env 창은 위에서 설명한 것 처럼 메모리에 등록한 변수들을 각 이름과 내용에 대해 간략히 보여줍니다. console 창에 ls()를 입력하면 나타나는 등록된 변수들의 이름과 같습니다. HIstory 창은 console 창에 입력한 순서대로 기록을 해주는 공간입니다. 이 곳에서는 명령어를 클릭한 후 To Console과 To Source를 사용할 수 있습니다. 어떻게 동작하는지는 한번 실행해봐주세요. git 창은 git의 기능을 GUI로 사용할 수 있게 제공합니다. commit, pull, push, log 등의 기능을 사용할 수 있습니다. 다음 장에서 git과 github에 대해 간단히 사용하는 법을 설명드리겠습니다. 2.2.4 help 창 help 창은 다른 곳에 비해 다양한 기능을 수행합니다. files는 윈도우에서의 탐색기와 같이 파일들을 찾아볼 수 있습니다. 조금 불편하긴 하지만 이름 바꾸기, 복사, 이동 등을 할 수 있습니다. 그리고 메모리에 올릴 데이터(csv, xlsx 등)를 왼쪽 클릭하면 아래 화면과 같이 view와 import를 할 수 있습니다. 물론 저는 명령어로 불러오는 것을 권장합니다. plot 창은 plot과 그 계열의 차트나 그림을 그리는 명령어의 결과물이 표시되는 곳입니다. 전에 그렸던 결과물이 계속 저장되서 전에 그렸던 그림을 다시 볼 수 도 있습니다. packages 창은 현재 시스템에 설치되어 있는 package들을 리스트로 보여주고, 현재 불러와져서 사용할 수 있는 package들을 체크 박스로 표시해줍니다. install, update 버튼도 있습니다. Packrat은 패키지 의존성 관리 도구로써 패키지들을 프로젝트 별로 독립적으로 관리해서 다른 환경에서 사용할 때 최대한 실행 환경을 유지할 수 있게 도와주는 역할을 합니다. help 창은 help(함수명), ?함수명 같이 함수의 설명서를 요구하는 명령어를 console 창에 입력했을 때 설명 문서를 보여주는 곳입니다. help에 대해서는 다음 다음장에서 다루도록 하겠습니다. 각 세부적인 기능에 대해 계속 업데이트 하겠습니다. 2.3 프로젝트와 버전관리 RStudio는 사용 화면에 대화형 console 창을 항상 켜놓고 있는 형태의 IDE 입니다. 그렇다 보니 RStudio에서 직접 프로젝트라는 기능을 제공합니다. 프로젝트란 어떤 분석 프로젝트 단위 하나를 의미하며 그 프로젝트를 관리하는 것을 도와주는 도구들을 제공합니다. 2.3.1 폴더와 프로젝트 가장 간단하게는 .proj 파일을 생성하는 것입니다. 왼쪽 위에 File &gt; New Project &gt; New Diractory &gt; Empty Project 를 선택하신 후 폴더 이름을 입력하고 프로젝트를 만듭니다. 그러면 프로젝트 이름과 같은 폴더가 만들어 지고 그 안에 프로젝트이름.porj파일이 함께 생성됩니다. .proj 파일은 Tools &gt; Project Options에서 조절할 수 있는 정보들을 저장하고 있습니다. 그리고 더블 클릭을 통해 프로젝트을 오픈하면서 RStudio를 실행시킬 수 있습니다. 또한 workding directory를 프로젝트 폴더로 자동 지정해 줍니다. 프로젝트 내의 코드 작업물을 모두 상대경로를 편하게 사용할 수 있게 해줍니다. 다른 사람들에게 공유할 때도 폴더 째로 공유하고, .proj파일로 실행하면 다른 곳에서도 어느 정도 코드가 동작하는데 경로나 설정을 걱정하지 않을 수 있습니다. 2.3.1.1 재현성을 위한 패키지 의존성 관리도구 Packrat 각 프로젝트에서 사용하는 패키지를 프로젝트 폴더내에 관리할 수 있게 해줌으로써 더욱 코드 재현성을 보장하는 관리도구입니다. Tools &gt; Project Options 하위에 옵션이 있으며 체크박스를 체크하는 것으로 사용할 수 있습니다. 처음부터 프로젝트를 만들 때 선택할 수도 있습니다. 자세한 안내는 여기를 참고하세요. 2.3.2 버전관리도구 git 2.3.2.1 버전관리도구란 git은 현재 개발자들에게 가장 인기있는 버전관리도구 입니다. 버전관리도구란 파일의 변경사항을 저장하는 도구로 word 같은 곳에서 Ctrl+z 같은 것(되돌리기)을 수행하기 위해 변경이 생길때 마다 저장하는 것과 비슷한 기능을 수행합니다. 다른 점이라면 프로젝트와 같이 폴더별로 관리된다는 점, 변경상태에 대해서 추적할 파일을 git에게 알려주는 행위를 해야 한다는 점, 저장을 일부러 해야 한다는 점 정도가 차이점이라고 볼 수 있습니다. 각각 git init, git add, git commit 명령어에 대응되는 개념입니다. 2.3.2.2 git으로 버전 관리하기 git init은 명령을 실행한 위치의 폴더가 git이 관리하는 프로젝트 폴더임을 선언하는 명령어입니다. 위 그림처럼 .git이라는 폴더가 생기는데 여기에 버전관리를 위한 여러 정보들을 저장합니다. 앞에 .이 붙은 폴더는 unix 계열 OS에서 숨김파일을 뜻하고, 윈도우에서도 숨김 파일 옵션으로 생성됩니다. 숨김 파일을 보는 옵션을 설정하시면 확인하실 수 있습니다. 어쨌든 git을 사용하는 첫번째 방법을 배웠습니다. 2.3.2.3 git이 이해하는 세 가지 상태 git은 폴더 내에 있는 파일들을 전부 3가지 상태로 구분합니다. 그것은 tracked, modified, staged입니다. 각각 살펴보겠습니다. tracked는 말 그대로 파일이 추적되고 있는 상태다라는 뜻합니다. git이 추적할 파일을 지정해 주는 git add [파일 or 폴더명]을 통해 untracked 파일이 tracked 파일로 상태가 변경되고 git의 추적이 시작됩니다. 과거 용량 등의 관리가 중요할 때 의 기능으로 이해하고 있으며 최근의 git을 사용하기 위한 추가적인 지원도구들은 대부분 자동으로 git add .을 진행하여 폴더내의 모든 파일을 계속 tracked 상태를 유지해 줍니다. tracked 상태의 파일을 수정하면 modified 상태가 됩니다. track 이 시작되면 파일의 track 시작할 때의 상태를 저장해 두는데, 그것과 비교해서 다른 점이 발생하면 modified 상태로 git은 인지하고 있습니다. 하지만 아직 git이 달라진 점을 저장하지 않습니다. 달라진 것만 알고 있는 상태입니다. modified 상태의 파일은 아직 commit할 수 없습니다. stage 위에 올려서 commit 할 수 있는 상태로 만들어야 합니다. 즉, staged 상태는 commit을 할 대상 파일로 지정되었다는 뜻입니다. commit이란 처음 생성된 상태나 이전 commit된 상태와 현재 상태를 비교해서 달라진 점을 저장하는 것을 뜻합니다. 이 때 git은 달라진 점만 저장합니다. 저장하면서 주석과 같은 기능을 하는 commit message를 작성해 둘 수 있습니다. 이 메세지를 통해서 코드에서 주요하게 달라진 점이 무엇인지를 파악할 수 있습니다. 이렇게 git은 코드의 상태를 정의하고, commit을 통해 변경되는 지점들을 저장합니다. 그럼 git checkout을 이용해 저장된 commit의 위치로 자유롭게 움직일 수 있습니다. 2.3.2.4 로컬과 리모트 git은 협업을 위한 도구이기도 합니다. 그래서 직접 작업하는 프로젝트 공간인 local과 다른 사람들과 공유하기 위한 공동 프로젝트 공간인 remote가 있습니다. 모두 repository(줄여서 repo) 또는 저장소라는 표현을 씁니다. remote에 git으로 관리되고 있는 프로젝트가 있다고 생각해 봅시다. 그 remote repo의 주소를 가지고 local에 git clone [remote repo 주소]명령어로 복사를 합니다. 그리고 local에서 새로운 파일도 만들고 코드도 작성한 후에 위에서 말한 것 처럼 git add로 파일을 등록하고, git commit을 통해 변경 사항들을 저장합니다. 이제 local에 저장된 변경부분을 remote에 기록을 해야 하는데 git push라고 합니다. 2.3.3 github github은 현재 가장 인기있는 git remote repository service입니다. 많은 분들이 이렇게 헷갈리시는데, github는 정확히 git과 같은 것이 아닙니다. github은 git에서의 remote repo를 저장할 수 있는 공간을 제공하는 서비스입니다. 비슷한 서비스로는 bitbuket,gitlab 등이 있습니다. git과 비슷한 다른 버전관리 도구를 지원하기도 합니다. github은 git과 달리 remote repo끼리 clone과 push와 같은 기능을 수행하는 새로운 옵션을 제공합니다. 바로 fork와 pull request입니다. SNS처럼 좋아요를 의미하는 star도 있습니다. fork는 공유하기와 비슷한데, 자신의 remote repo에 다른 사람의 remote repo를 복사해 오는 것입니다. git clone과 비슷합니다. github내의 remote repo끼리 동작하는 것이기 때문에 remote repo와 local repo가 상호작용하는 동작과 다른 명령어를 사용합니다. pull request는 fork로 연결되어 있는 remote repo에 자신의 remote repo에 있는 코드를 pull 해가라고 요청하는 것입니다. fork를 한 후 수정한 코드를 원래 주인의 remote repo에 적용하는 것을 요청하는 명령입니다. 위와 같은 과정을 통해 github이 동작합니다. github은 git의 인기와 공개 저장소의 무제한 제공으로 세계에서 가장 인기있는 서비스가 되었고, 대부분의 오픈소스가 저장되고 개발되는 공간이 되었습니다. 오픈소스는 라이선스를 잘 지킨다면 소스코드를 사용해도 좋다고 선언한 코드들입니다. 많은 분들이 자신들의 코드를 공개하고, 결과물을 공유합니다. RStudio 또한 코드를 github에 공개하고 관리하고 있습니다. RStudio는 조금 복잡한 라이선스로 선언해서 편하게 사용할 수 있는 것은 아니지만 이렇게 코드를 공개하고 라이선스를 선언한 것을 오픈소스라고 합니다. 2.3.4 github과 패키지 생태계 R-core 팀이 관리하는 패키지 배포 서버인 cran은 매우 엄격한 패키지 사전 검열을 합니다. 그렇기 때문에 console에서 install.packeges() 한번에 편하게 패키지를 설치하고 사용할 수 있는 것입니다. 최근에는 사전 검열을 통과하기 전 버전의 패키지들이 코드 관리를 위해 github에 저장소를 운영하기도 합니다. github은 인기있는 저장소이기 때문에 구글 검색을 통해 사용자들이 유입되기 좋은 곳입니다. 특히 패키지 운영을 위한 홈페이지, wiki, readme 파일 관리등의 기능을 충분히 지원하는 등 좋은 점이 많습니다. 많은 R 패키지 개발자들도 코드 관리를 github에서 하고 있습니다. 최근에는 개발 버전은 github에, 안정화 버전은 cran에 등록해서 사용할 수 있게 하는 문화가 자리잡혀 있습니다. 2.3.5 실습 진행 2.4 도움말 cran에 등록된 패키지들은 모두 도움말이 충분히 작성되어 있습니다. Vignette라는 세부 패키지 설명이나 아예 블로그 등에서 패키지 사용법이나 작업 순서들을 설명한 패키지도 있습니다. 모두 검색을 통해서 찾아야 되긴 하지만 최소한의 설명서가 내장되어 있으니 그 것을 먼저 확인하는 것이 좋습니다. 도움말은 ?함수명이나 help(함수명)으로 실행할 수 있습니다. ?함수명 2.4.1 도움말 설명 2.4.2 도움말 사용법 2.4.3 함수의 옵션 설명 2.4.4 함수의 상세 설명 2.4.5 예시 코드 "],
["data-type.html", "3 대부분의 에러 문제를 해결할 수 있는 기초 자료형에 대한 이해 3.1 기초 자료형 3.2 벡터 3.3 메트릭스 3.4 팩터 3.5 리스트 3.6 데이터프레임 3.7 날짜", " 3 대부분의 에러 문제를 해결할 수 있는 기초 자료형에 대한 이해 3.1 기초 자료형 3.2 벡터 3.3 메트릭스 3.4 팩터 3.5 리스트 3.6 데이터프레임 3.7 날짜 "],
["for-apply.html", "4 단순 반복 업무를 위한 for문과 apply류 맛보기 4.1 반복문 4.2 조건문 4.3 apply류의 함수들", " 4 단순 반복 업무를 위한 for문과 apply류 맛보기 4.1 반복문 4.1.1 for 4.1.2 while 4.1.3 repeat 4.1.4 break 4.1.5 next 4.2 조건문 4.2.1 if 4.2.2 else 4.2.3 ifelse 4.2.4 switch 4.3 apply류의 함수들 4.3.1 apply 4.3.2 *apply {#applys} 4.3.3 aggregate "],
["sql.html", "5 데이터 원본/의존성의 개념과 SQL 문법 익히기 5.1 사전 준비 5.2 데이터를 바라보는 시선 5.3 기본 SQL 문법", " 5 데이터 원본/의존성의 개념과 SQL 문법 익히기 5.1 사전 준비 5.1.1 mariaDB 설치 5.1.1.1 windows 5.1.1.2 mac 5.1.1.3 docker 5.2 데이터를 바라보는 시선 5.2.1 데이터 원본 5.2.2 데이터 의존성 5.3 기본 SQL 문법 5.3.1 CRUD와 데이터베이스 5.3.2 Read 문법 5.3.3 Join "],
["tidyr.html", "6 tidy data 개념과 dplyr+tidyr로 데이터 다루기 6.1 tidy data 6.2 tidyverse", " 6 tidy data 개념과 dplyr+tidyr로 데이터 다루기 6.1 tidy data 6.2 tidyverse "],
["ggplot.html", "7 보고용 차트를 위한 ggplot2 사용하기 7.1 test", " 7 보고용 차트를 위한 ggplot2 사용하기 7.1 test "],
["knitr.html", "8 정기 보고서 자동 작성을 위해 knitr로 문서화하고 스케줄러로 자동화하기 8.1 Markdown 문법 8.2 Rmd로 문서 작성 8.3 스케줄러", " 8 정기 보고서 자동 작성을 위해 knitr로 문서화하고 스케줄러로 자동화하기 8.1 Markdown 문법 8.2 Rmd로 문서 작성 8.3 스케줄러 "],
["shiny.html", "9 shiny 패키지를 활용한 인터렉티프 웹 만들기", " 9 shiny 패키지를 활용한 인터렉티프 웹 만들기 "],
["outro.html", "10 마치며", " 10 마치며 "]
]
